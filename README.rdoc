
= Setup
  * Install Mongo (brew install mongodb)
  ** The truestack app should hit the local mongo server on the default port
  * Install the fuzzinator
  ** This is the example app - clone it to it's own repo
  * Setup POW
  ** Truestack.dev -> truestack app directory
  ** Fuzzinator.dev -> truestack_fuzzinator app directory
  * Create the truestack keys
  ** check out: http://truestack.dev
  ** Go to: http://truestack.dev/users/login
  ** Click, sign up
  ** Add some credentials, and go!  (admin@example.com , adminadmin)
  ** Click on "New App" - to create a new app to send data to.
  ** Give it a name in 'App Name'
  ** Now you have an app. Click on the down arrow in the top left, and select "Edit"
  ** Go down to the bottom, and find the ENV TRUESTACK_URI
  ** Copy that to truestack_fuzzinator/config/truestack_uri
  ** But replace director.truestack.com with => director.truestack.dev

  * Hit http://fuzzinator.dev
  * Click on one of the links. Each one does something a bit different.

  * Now go check the app page in the truestack app.
  ** Click on the down arrow, select the app from the list of names
  ** You should see some data in there!

  ** That gives you a spin-up on the app.  keep hitting things and making data.
  ** Add the truestack_rails gem (from the github repo, look at the fuzzinator's Gemfile), set the truestack_uri, and see other types of data.

== OLD CSEXTON Setup

To configure the local install of truestack you will need to set enviroment variables. This can be done with yoru .rvmrc if you are using rvm, or in your shell's rc files.

To use RVM:

Create a file with the name .envrc and add the following to it:

    echo "Go, Truestack, go!"
    export STRIPE_SECRET_KEY="secret key"
    export STRIPE_PUBLIC_KEY="publishable key"
    export MONGOLAB_URI="mongo url if not localhost"

== Welcome to TrueStack

== TODO
* verify code for stacked graph
* switch the req cont grph to line not curve
* add exceptions and popups
* add deploy markers and popups
* hover w/ annotations on each timing / section of the graph
* add time stamp X axes
* Big test suite, which runs all the different rails versions (as fuzzinators) and pushes data to the test machine and tests the results.
* Nightly emails which show trends based on each deploy that was made
* OAuth on greenfrylabs.com ?

== Concept
* When you are truly agile and deployed every day,you need someone to be watching the overall trends of your site's performance and efficiency.
* When you see that over time or with a given deploy, certain methods start to creep in suckiness... Be on top of it
* With nightly reports that show the trends for all the day's deploys. Get a handle on performance problems, before they are problems.

* In real-time you can combine metrics (with trueminer) and outputs from truestack -> truecanary to have a real-time dashboard of trends.
* TrueCanary watches all sorts of data feeds for changes over time - when it goes outside a window of values, is an unparsable error, or if it changes too fast in a given amount of time - we let you know.


== Displaying
On index page, you view the 'latest' deploy.

It shows you the
* req / s
* the % of time spent in the DB
* the % of time spent in the view (how many DB calls in there)
* the % of time spent in the controllers
* the % of time spent in the models
* the # of exceptions overall (and a quick ability to list them (stacktrace, name, line / file, inside what action)
* All the requests show a variance rating -- how variable are the request times.
* your overall performance rating compared to last deploy.
* A capped collection for each method which shows the 5 fastest and 5 slowest examples of this method (and their request data)
* A selector to hop back to previous deploys

Sections below that:
* the slowest action (Laggin')
* the most used action ( Popular)
* the trending action -- which are faster / slower (Trendy)
* the actions never hit (Lonely)
* the buggiest action (most exceptions)

* Can click on any individual action that you see - and see the heat map 'stack trace'.
* Sort it simply by most time used -> least time used.  Want to focus on most important thing to speed up.
* darker 'tigher' timings indicate less variable actions. Want consistent actions (if possible).

* When viewing a single action - you can say 'compare to previous deploys'.  And we'll have some diff ability to show the difference between the current and past 10 or so deploys (or month or something)

* Deployment indicator needs to tell us the names of all the public controller methods, so we can put them in the list from the get-go and know which are never hit.
